# Example nginx configuration for lua-resty-digest-auth
# This file demonstrates the new, simplified interface

# Define shared memory for digest authentication
lua_shared_dict digest_auth 2m;

# Optional: Define shared memory for rate limiting
lua_shared_dict digest_auth_ratelimit 1m;

# Initialize the digest auth module with simple configuration
init_by_lua_block {
    local DigestAuth = require "resty.digest_auth"
    
    local ok, err = DigestAuth.configure {
        shared_memory_name = "digest_auth",
        credentials_file = "/etc/nginx/htdigest",
        realm = "My Secure Realm",
        nonce_lifetime = 600,        -- 10 minutes
        max_nonce_uses = 500,        -- 500 reuses per nonce
        rate_limit = {
            enabled = true,
            max_attempts = 50,
            window_seconds = 600,
            block_seconds = 300
        }
    }
    
    if not ok then
        error("Failed to configure digest auth: " .. (err or "unknown error"))
    end
}

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    server {
        listen 80;
        server_name example.com;
        
        # Public content (no authentication required)
        location / {
            return 200 "Public content - no authentication required";
            add_header Content-Type text/plain;
        }
        
        # Protected content with digest authentication - simple one-liner!
        location /protected/ {
            access_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.require_auth()
            }
            
            # Your protected content here
            return 200 "Protected content - authentication successful!";
            add_header Content-Type text/plain;
        }
        
        # API endpoint - same simple interface
        location /api/ {
            access_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.require_auth()
            }
            
            return 200 '{"status": "authenticated", "message": "API access granted"}';
            add_header Content-Type application/json;
        }
        
        # Admin area - same simple interface
        location /admin/ {
            access_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.require_auth()
            }
            
            return 200 "Admin area - restricted access";
            add_header Content-Type text/plain;
        }
        
        # Health check endpoint (no auth)
        location /health {
            return 200 "OK";
            add_header Content-Type text/plain;
        }
        
        # Utility endpoint to clear memory (for testing)
        location /admin/clear-memory {
            access_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.require_auth()
            }
            
            content_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.clear_memory()
                ngx.say("Memory cleared successfully")
            }
        }
    }
    
    # HTTPS server (recommended for production)
    server {
        listen 443 ssl http2;
        server_name example.com;
        
        # SSL configuration
        ssl_certificate /etc/ssl/certs/example.com.crt;
        ssl_certificate_key /etc/ssl/private/example.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # Same locations as HTTP server - notice the identical, simple interface
        location / {
            return 200 "Public content - no authentication required";
            add_header Content-Type text/plain;
        }
        
        location /protected/ {
            access_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.require_auth()
            }
            
            return 200 "Protected content - authentication successful!";
            add_header Content-Type text/plain;
        }
        
        location /api/ {
            access_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.require_auth()
            }
            
            return 200 '{"status": "authenticated", "message": "API access granted"}';
            add_header Content-Type application/json;
        }
        
        location /admin/ {
            access_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.require_auth()
            }
            
            return 200 "Admin area - restricted access";
            add_header Content-Type text/plain;
        }
        
        location /health {
            return 200 "OK";
            add_header Content-Type text/plain;
        }
    }
} 
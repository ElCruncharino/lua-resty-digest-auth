# Test configuration for lua-resty-digest-auth
user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    # Enhanced logging formats for monitoring
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    log_format auth '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'auth_user="$http_authorization"';

    log_format security '$remote_addr - [$time_local] "$request" '
                        '$status "$http_user_agent" '
                        'event="$sent_http_x_security_event" '
                        'reason="$sent_http_x_block_reason"';

    access_log /usr/local/openresty/nginx/logs/access.log main;
    error_log /usr/local/openresty/nginx/logs/error.log;

    # Security event logging
    access_log /usr/local/openresty/nginx/logs/auth.log auth;
    access_log /usr/local/openresty/nginx/logs/security.log security;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Shared memory for digest auth
    lua_shared_dict digest_auth 2m;
    lua_shared_dict digest_auth_ratelimit 1m;

    # Initialize digest auth module
    init_by_lua_block {
        local DigestAuth = require "resty.digest_auth"
        
        local ok, err = DigestAuth.configure {
            shared_memory_name = "digest_auth",
            credentials_file = "/etc/nginx/htdigest",
            realm = "Test Realm",
            nonce_lifetime = 300,        -- 5 minutes for testing
            max_nonce_uses = 100,        -- 100 reuses for testing
            rate_limit = {
                enabled = true,
                max_attempts = 10,
                window_seconds = 300,
                block_seconds = 60
            },
            brute_force = {
                enabled = true,
                max_failed_attempts = 5,
                window_seconds = 300,
                block_seconds = 1800,
                suspicious_patterns = {
                    common_passwords = {"password", "123456", "admin", "root", "test"},
                    empty_credentials = true,
                    malformed_headers = true,
                    rapid_requests = 5,
                    username_enumeration = 3
                }
            }
        }
        
        if not ok then
            error("Failed to configure digest auth: " .. (err or "unknown error"))
        end
        
        ngx.log(ngx.INFO, "DigestAuth module configured successfully")
    }

    server {
        listen 8080;
        server_name localhost;
        
        # Public content
        location / {
            return 200 "Public content - no authentication required\n";
            add_header Content-Type text/plain;
        }
        
        # Protected content
        location /protected/ {
            access_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.require_auth()
            }
            add_header Content-Type text/plain;
        }
        
        # API endpoint
        location /api/ {
            access_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.require_auth()
            }
            add_header Content-Type application/json;
        }
        
        # Admin area
        location /admin/ {
            access_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.require_auth()
            }
            add_header Content-Type text/plain;
        }
        
        # Health check
        location /health {
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
        
        # Utility endpoints for testing
        location /test/clear-memory {
            access_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.require_auth()
            }
            
            content_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.clear_memory()
                ngx.say("Memory cleared successfully")
            }
        }
        
        location /test/clear-nonces {
            access_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.require_auth()
            }
            
            content_by_lua_block {
                local DigestAuth = require "resty.digest_auth"
                DigestAuth.clear_nonces()
                ngx.say("Nonces cleared successfully")
            }
        }
    }
} 